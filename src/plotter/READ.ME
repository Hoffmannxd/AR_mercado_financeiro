Plotter - Parte principal da interface

Intro

Existem muitas ferramentas de renderização de gráficos web: Char.js; Angular-chart.js; PHPPlott; Highcharts.js; Google Chart API e etc.
Optamos por usar a Google Chart API por ter uma vasta opção de tipos de gráficos e customizações. A documentação também foi um fator relevante uma vez que já possui artigos referentes sobre a utilização de dados a partir de arquivos em notação JSON.

Temos 3 opções de como utilizar a API com os dados JSON.

- Puxar um arquivo JSON normal e determinar o esquema de colunas e linhas dentro do HTML. É o método mais fácil porém estático, caso queiramos adicionar mais informação ao gráfico não será possível, como novas colunas, linhas...

- Puxar os arquivos via jQuery usando um script getData.php, usando o método get_file_contents. Esse método é pratico porém o arquivo de entrada não deve ser um JSON e sim um Java Script literal data parameter, que tem uma notação muito parecida mas não identica, especificando as colunas e linhas com seus identificadores, etiquetas, tipos e valores. Ainda falta um script que tranformará o JSON em JS literal parameter, que pode ser lido pela API diretamente e demais opções de visualização como tamanho, nome dos eixos, título, estilo do gráficos são estáticos no arquivo principal plotter.html.

- Como sugerido pela documentação, gerar um trecho JS literal parameter, já dentro do html, com o esquema das opções de visualização a partir de um script em python usando uma biblioteca própria que gera o objeto "google visualization". Ainda estamos avaliando qual das duas será mais prática e factível.

Instalação

Foi instalado um servidor Apache em conjunto com o pacote php para hostear, ainda local, o site do projeto. Os dois principais arquivos são plotter.html e getData.php, além do arquivo json que será gerado a partir da escolha do usuário de avaliação de risco.

Descrição do código

O arquivo principal é o plotter.html, ele carrega as as ferramentas usadas, que são o loader da API do google e o jquery. A função que desenha o gráfico só é chamada após a renderização do mesmo usando o método "setOnLoadCallback". O jquery chama o arquivo getData.php que irá carregar com o método get_file_contents os dados presentes no JS literal data parameter. Esses dados alimentam o método google.visualization.DataTable, já criando uma tabela com os valores anteriormente presentes no arquivo JSON. Depois são definidas as customizações do gráfico, tamanho, nome dos eixos, título, legenda, tipo de escala, etc.
Por fim instancia o chart escolhendo o seu tipo, os dados inseridos e as opções setadas, no elemento que estará presente no bloco <div>, 'chart-div'.
